# -*- coding: utf-8 -*-
"""Copy of QuerryCrawler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17R0T2ALEQmFqAgFW1M2SYV-oK0KjPo8f
"""

from bs4 import BeautifulSoup as bs
import requests
from urllib.parse import quote
import spacy


def querry_bing(searchString):
    nlp = spacy.load('vi_core_news_lg')
    is_plagrism = False
    is_plagrism_links = []
    search_result_contents = []
    TIMEOUT_DURATION = 3
    PLAGIARISED_THRESHOLD = 0.5
    url = 'https://www.bing.com/search?q='+quote(searchString)
    print(url)
    try:
        content = requests.get(url, headers={
                               'User-agent': 'your bot 0.1'}, verify=False, timeout=TIMEOUT_DURATION).content
    except:
        return 'null'
    soup = bs(content, 'html.parser')
    body = soup.find('body')
    no_result = body.find_all('li', {"class": "b_no"})
    for r in no_result:
        result_string = r.select('h1')
        if(str(result_string).startswith('[<h1>There are no results for')):
            return 'null'
    results = body.find_all('div', {"class": "b_caption"})
    for result in results:
        try:
            cite = result.find('cite')
            text_para = result.find('p')
            search_unique = set(searchString.lower().split(' '))
            search_result_content = text_para.text.lower().replace(
                '...', '').strip().split('·')[-1]
            result_text = set(search_result_content.split(' '))
            bold_array = result.find_all('strong')
            for s in range(len(bold_array)):
                bold_array[s] = bold_array[s].text.lower()
            bold_unique = set(' '.join(bold_array).split(' '))
            match_bold = len(search_unique & bold_unique)/len(search_unique)
            result_match = len(result_text & bold_unique)/len(bold_unique)
            print(f'% match bold: {match_bold}')
            print(f'% result match: {result_match}')

            embedded_search_string = nlp(searchString.strip())
            embedded_result_string = nlp(search_result_content)
            similarity_score = embedded_search_string.similarity(
                embedded_result_string)
            print(f'% similarity: {similarity_score}')

            if match_bold > PLAGIARISED_THRESHOLD and result_match > PLAGIARISED_THRESHOLD and similarity_score > PLAGIARISED_THRESHOLD:
                is_plagrism = True
                is_plagrism_links.append(cite)
        except:
            print('skipping search result')
        print("-----"*3)
    return is_plagrism, is_plagrism_links


def querry_google(searchString):
    nlp = spacy.load('vi_core_news_lg')
    is_plagrism = False
    ballot = False
    is_plagrism_links = []
    TIMEOUT_DURATION = 3
    PLAGIARISED_THRESHOLD = 0.5
    url = 'https://www.google.com/search?q='+quote(searchString)
    print(url)
    try:
        content = requests.get(url, headers={
                               'User-agent': 'your bot 0.1'}, verify=False, timeout=TIMEOUT_DURATION).content
    except:
        return 'null'
    soup = bs(content, 'html.parser')
    body = soup.find('body')
    results = body.find_all('div', {"class": "ZINbbc xpd O9g5cc uUPGi"})
    for result in results:
        try:
            cite = result.find_all('div', {'class': 'kCrYT'})[0]
            cite = cite.find('a', href=True)
            cite = cite['href'][7:]

            text_para = result.find_all('div', {'class': 'kCrYT'})[1]
            text_para = text_para.find(
                'div', {"class": "BNeawe s3v9rd AP7Wnd"})

            search_unique = set(searchString.strip().lower().split())
            search_result_content = text_para.text.strip(
            ).lower().replace('...', '').split('·')[-1]
            result_text = set(search_result_content.split(' '))
            bold_array = set(result_text)
            bold_unique = set(' '.join(bold_array).split(' '))
            match_bold = len(search_unique & bold_unique)/len(search_unique)
            result_match = len(result_text & bold_unique)/len(bold_unique)
            print(f'% match bold: {match_bold}')
            print(f'% result match: {result_match}')

            embedded_search_string = nlp(searchString.strip())
            embedded_result_string = nlp(search_result_content)
            similarity_score = embedded_search_string.similarity(
                embedded_result_string)
            print(f'% similarity: {similarity_score}')
            if match_bold > PLAGIARISED_THRESHOLD and result_match > PLAGIARISED_THRESHOLD and similarity_score > PLAGIARISED_THRESHOLD:
                is_plagrism = True
                is_plagrism_links.append(cite)
        except:
            print('skipping search result')
        print("-----"*3)
    return is_plagrism, is_plagrism_links
